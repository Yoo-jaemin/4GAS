Version 3.2 HI-TECH Software Intermediate Code
"22 bsp/i2c.h
[v _i2c_writeBytes `(uc ~T0 @X0 0 ef4`Cuc`*Cuc`Cuc`uc ]
"24
[v _i2c_readBytes `(uc ~T0 @X0 0 ef3`Cuc`*uc`Cuc ]
"23
[v _i2c_writeBytes_to `(uc ~T0 @X0 0 ef5`Cuc`*Cuc`Cuc`*Cuc`Cuc ]
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef __int24 int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 52: typedef unsigned char uint8_t;
[; ;stdint.h: 58: typedef unsigned int uint16_t;
[; ;stdint.h: 65: typedef __uint24 uint24_t;
[; ;stdint.h: 72: typedef unsigned long int uint32_t;
[; ;stdint.h: 88: typedef signed char int_least8_t;
[; ;stdint.h: 96: typedef signed int int_least16_t;
[; ;stdint.h: 109: typedef __int24 int_least24_t;
[; ;stdint.h: 118: typedef signed long int int_least32_t;
[; ;stdint.h: 136: typedef unsigned char uint_least8_t;
[; ;stdint.h: 143: typedef unsigned int uint_least16_t;
[; ;stdint.h: 154: typedef __uint24 uint_least24_t;
[; ;stdint.h: 162: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 181: typedef signed char int_fast8_t;
[; ;stdint.h: 188: typedef signed int int_fast16_t;
[; ;stdint.h: 200: typedef __int24 int_fast24_t;
[; ;stdint.h: 208: typedef signed long int int_fast32_t;
[; ;stdint.h: 224: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 230: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 240: typedef __uint24 uint_fast24_t;
[; ;stdint.h: 247: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 268: typedef int32_t intmax_t;
[; ;stdint.h: 282: typedef uint32_t uintmax_t;
[; ;stdint.h: 289: typedef int16_t intptr_t;
[; ;stdint.h: 294: typedef uint16_t uintptr_t;
[; ;stdbool.h: 15: typedef unsigned char bool;
[; ;board.h: 46: typedef union {
[; ;board.h: 47: int16_t i16_data;
[; ;board.h: 48: uint16_t u16_data;
[; ;board.h: 49: __pack uint8_t u8_Data[2];
[; ;board.h: 50: } u_2byte_Conv;
[; ;board.h: 52: enum {
[; ;board.h: 53: CELSIUS,
[; ;board.h: 54: FAHRENHEIT
[; ;board.h: 55: };
[; ;board.h: 57: enum {
[; ;board.h: 58: RAW_MODE,
[; ;board.h: 59: FIL_MODE
[; ;board.h: 60: };
[; ;board.h: 62: enum {
[; ;board.h: 63: GAS_CH0,
[; ;board.h: 64: GAS_CH1,
[; ;board.h: 65: GAS_CH2,
[; ;board.h: 66: GAS_CH3
[; ;board.h: 67: };
[; ;board.h: 69: enum {
[; ;board.h: 70: USB_NONE,
[; ;board.h: 71: USB_DETACHED,
[; ;board.h: 72: USB_ATTACHED
[; ;board.h: 73: };
[; ;board.h: 75: enum {
[; ;board.h: 76: TEMP_CMP_OFF,
[; ;board.h: 77: TEMP_CMP_ON
[; ;board.h: 78: };
[; ;board.h: 80: enum {
[; ;board.h: 81: OFF,
[; ;board.h: 82: ON
[; ;board.h: 83: };
[; ;board.h: 143: void write_command(const uint8_t* buff);
[; ;board.h: 144: uint16_t* get_product_desc();
[; ;i2c.h: 4: typedef enum {
[; ;i2c.h: 5: I2C_100kHz,
[; ;i2c.h: 6: I2C_400kHz
[; ;i2c.h: 7: } I2C_SPEED;
[; ;i2c.h: 9: typedef enum {
[; ;i2c.h: 10: I2C_ACK,
[; ;i2c.h: 11: I2C_NACK
[; ;i2c.h: 12: } I2C_TRANS_CTRL;
[; ;i2c.h: 19: void i2c_init(const I2C_SPEED speed);
[; ;i2c.h: 21: bool i2c_writeData(const uint8_t *wrptr, const uint8_t len, bool isStop);
[; ;i2c.h: 22: bool i2c_writeBytes(const uint8_t address, const uint8_t *wrptr, const uint8_t len, bool isStop);
[; ;i2c.h: 23: bool i2c_writeBytes_to(const uint8_t address, const uint8_t *wraddr, const uint8_t addrlen, const uint8_t *wrptr, const uint8_t len);
[; ;i2c.h: 24: bool i2c_readBytes(const uint8_t address, uint8_t *rdptr, const uint8_t len);
[; ;i2c.h: 25: bool i2c_readBytes_from(const uint8_t address, const uint8_t *wraddr, const uint8_t addrlen, uint8_t *rdptr, const uint8_t len);
[; ;ads1114.h: 43: typedef enum {
[; ;ads1114.h: 44: FSR_6p144V,
[; ;ads1114.h: 45: FSR_4p096V,
[; ;ads1114.h: 46: FSR_2p048V,
[; ;ads1114.h: 47: FSR_1p024V,
[; ;ads1114.h: 48: FSR_0p512V,
[; ;ads1114.h: 49: FSR_0p256V
[; ;ads1114.h: 50: } e_ADC_Gain;
[; ;ads1114.h: 53: typedef enum {
[; ;ads1114.h: 54: CONTINUE_CONV,
[; ;ads1114.h: 55: SINGLE_CONV
[; ;ads1114.h: 56: } e_ADC_Mode;
[; ;ads1114.h: 59: typedef enum {
[; ;ads1114.h: 60: SPS8,
[; ;ads1114.h: 61: SPS16,
[; ;ads1114.h: 62: SPS32,
[; ;ads1114.h: 63: SPS64,
[; ;ads1114.h: 64: SPS128,
[; ;ads1114.h: 65: SPS250,
[; ;ads1114.h: 66: SPS475,
[; ;ads1114.h: 67: SPS860
[; ;ads1114.h: 68: } e_ADC_DataRate;
[; ;ads1114.h: 72: typedef enum {
[; ;ads1114.h: 73: COMP,
[; ;ads1114.h: 74: WIN_COMP
[; ;ads1114.h: 75: } e_Comparator_Mode;
[; ;ads1114.h: 78: typedef enum {
[; ;ads1114.h: 79: LO,
[; ;ads1114.h: 80: HI
[; ;ads1114.h: 81: } e_Comparator_Pol;
[; ;ads1114.h: 84: typedef enum {
[; ;ads1114.h: 85: NONE_LATCH,
[; ;ads1114.h: 86: LATCH
[; ;ads1114.h: 87: } e_Comparator_Latch;
[; ;ads1114.h: 90: typedef enum {
[; ;ads1114.h: 91: ONE_CONV,
[; ;ads1114.h: 92: TWO_CONV,
[; ;ads1114.h: 93: FOUR_CONV,
[; ;ads1114.h: 94: DISABL
[; ;ads1114.h: 95: } e_Comparator_Que;
[; ;ads1114.h: 101: bool ads1114_read_ready(uint8_t chNum);
[; ;ads1114.h: 102: bool ads1115_SetUp(uint8_t chNum, uint8_t mode, uint8_t pga, uint8_t dataRate);
[; ;ads1114.h: 103: bool ads1114_read(uint8_t chNum, int16_t* raw_adc);
[; ;ads1114.h: 105: bool ads1114_Comparator_SetUp(uint8_t mode, uint8_t polar, uint8_t latch, uint8_t que);
"11 bsp/ads1114.c
[v _ADS1115_I2C_ADDRESS `uc ~T0 @X0 -> 3 `i e ]
[i _ADS1115_I2C_ADDRESS
:U ..
-> -> 148 `i `uc
-> -> 148 `i `uc
-> -> 150 `i `uc
..
]
[; ;ads1114.c: 11: uint8_t ADS1115_I2C_ADDRESS[3] = {0x94, 0x94, 0x96};
"18
[v _ads1114_read_ready `(uc ~T0 @X0 1 ef1`uc ]
"19
{
[; ;ads1114.c: 18: bool ads1114_read_ready(uint8_t chNum)
[; ;ads1114.c: 19: {
[e :U _ads1114_read_ready ]
"18
[v _chNum `uc ~T0 @X0 1 r1 ]
"19
[f ]
"20
[v _wbuff `uc ~T0 @X0 1 a ]
[; ;ads1114.c: 20: uint8_t wbuff = 0x01;
[e = _wbuff -> -> 1 `i `uc ]
"21
[v _rbuff `uc ~T0 @X0 -> 2 `i a ]
[; ;ads1114.c: 21: uint8_t rbuff[2];
[; ;ads1114.c: 23: if (i2c_writeBytes(ADS1115_I2C_ADDRESS[chNum], &wbuff, 1, 1) == 0)
"23
[e $ ! == -> ( _i2c_writeBytes (4 , , , *U + &U _ADS1115_I2C_ADDRESS * -> _chNum `ux -> -> # *U &U _ADS1115_I2C_ADDRESS `ui `ux -> &U _wbuff `*Cuc -> -> 1 `i `uc -> -> 1 `i `uc `i -> 0 `i 3  ]
[; ;ads1114.c: 24: return 0;
"24
[e ) -> -> 0 `i `uc ]
[e $UE 2  ]
[e :U 3 ]
[; ;ads1114.c: 26: if (i2c_readBytes(ADS1115_I2C_ADDRESS[chNum], rbuff, 2) == 0)
"26
[e $ ! == -> ( _i2c_readBytes (3 , , *U + &U _ADS1115_I2C_ADDRESS * -> _chNum `ux -> -> # *U &U _ADS1115_I2C_ADDRESS `ui `ux &U _rbuff -> -> 2 `i `uc `i -> 0 `i 4  ]
[; ;ads1114.c: 27: return 0;
"27
[e ) -> -> 0 `i `uc ]
[e $UE 2  ]
[e :U 4 ]
[; ;ads1114.c: 29: if (rbuff[0] & 0x80)
"29
[e $ ! != & -> *U + &U _rbuff * -> -> -> 0 `i `ui `ux -> -> # *U &U _rbuff `ui `ux `i -> 128 `i -> 0 `i 5  ]
[; ;ads1114.c: 30: return 0;
"30
[e ) -> -> 0 `i `uc ]
[e $UE 2  ]
[e :U 5 ]
[; ;ads1114.c: 32: return 1;
"32
[e ) -> -> 1 `i `uc ]
[e $UE 2  ]
[; ;ads1114.c: 33: }
"33
[e :UE 2 ]
}
"35
[v _ads1115_SetUp `(uc ~T0 @X0 1 ef4`uc`uc`uc`uc ]
"36
{
[; ;ads1114.c: 35: bool ads1115_SetUp(uint8_t chNum, uint8_t mode, uint8_t pga, uint8_t dataRate)
[; ;ads1114.c: 36: {
[e :U _ads1115_SetUp ]
"35
[v _chNum `uc ~T0 @X0 1 r1 ]
[v _mode `uc ~T0 @X0 1 r2 ]
[v _pga `uc ~T0 @X0 1 r3 ]
[v _dataRate `uc ~T0 @X0 1 r4 ]
"36
[f ]
[v F158 `uc ~T0 @X0 -> 3 `i s ]
[i F158
:U ..
"37
-> -> 0 `i `uc
-> -> 3 `i `uc
-> -> 0 `i `uc
..
]
[v _adcInput `uc ~T0 @X0 -> 3 `i a ]
[; ;ads1114.c: 37: uint8_t adcInput[3] = {0x00, 0x03, 0x00};
[e = _adcInput F158 ]
"38
[v _wraddr `uc ~T0 @X0 1 a ]
[; ;ads1114.c: 38: uint8_t wraddr = 0x01;
[e = _wraddr -> -> 1 `i `uc ]
"39
[v _buff `uc ~T0 @X0 -> 2 `i a ]
[; ;ads1114.c: 39: uint8_t buff[2];
[; ;ads1114.c: 41: buff[0] = 0x00 | (adcInput[chNum] << 4) | (pga << 1) | mode;
"41
[e = *U + &U _buff * -> -> -> 0 `i `ui `ux -> -> # *U &U _buff `ui `ux -> | | | -> 0 `i << -> *U + &U _adcInput * -> _chNum `ux -> -> # *U &U _adcInput `ui `ux `i -> 4 `i << -> _pga `i -> 1 `i -> _mode `i `uc ]
[; ;ads1114.c: 42: buff[1] = (dataRate << 5) | 0b00010011;
"42
[e = *U + &U _buff * -> -> -> 1 `i `ui `ux -> -> # *U &U _buff `ui `ux -> | << -> _dataRate `i -> 5 `i -> 19 `i `uc ]
[; ;ads1114.c: 44: return i2c_writeBytes_to(ADS1115_I2C_ADDRESS[chNum], &wraddr, 1, buff, 2);
"44
[e ) ( _i2c_writeBytes_to (4 , , , , *U + &U _ADS1115_I2C_ADDRESS * -> _chNum `ux -> -> # *U &U _ADS1115_I2C_ADDRESS `ui `ux -> &U _wraddr `*Cuc -> -> 1 `i `uc -> &U _buff `*Cuc -> -> 2 `i `uc ]
[e $UE 6  ]
[; ;ads1114.c: 45: }
"45
[e :UE 6 ]
}
"47
[v _ads1114_read `(uc ~T0 @X0 1 ef2`uc`*i ]
"48
{
[; ;ads1114.c: 47: bool ads1114_read(uint8_t chNum, int16_t* raw_adc)
[; ;ads1114.c: 48: {
[e :U _ads1114_read ]
"47
[v _chNum `uc ~T0 @X0 1 r1 ]
[v _raw_adc `*i ~T0 @X0 1 r2 ]
"48
[f ]
"49
[v _wbuff `uc ~T0 @X0 1 a ]
[; ;ads1114.c: 49: uint8_t wbuff = 0x00;
[e = _wbuff -> -> 0 `i `uc ]
"50
[v _rbuff `uc ~T0 @X0 -> 2 `i a ]
[; ;ads1114.c: 50: uint8_t rbuff[2];
[; ;ads1114.c: 52: if (i2c_writeBytes(ADS1115_I2C_ADDRESS[chNum], &wbuff, 1, 1) == 0)
"52
[e $ ! == -> ( _i2c_writeBytes (4 , , , *U + &U _ADS1115_I2C_ADDRESS * -> _chNum `ux -> -> # *U &U _ADS1115_I2C_ADDRESS `ui `ux -> &U _wbuff `*Cuc -> -> 1 `i `uc -> -> 1 `i `uc `i -> 0 `i 8  ]
[; ;ads1114.c: 53: return 0;
"53
[e ) -> -> 0 `i `uc ]
[e $UE 7  ]
[e :U 8 ]
[; ;ads1114.c: 55: if (i2c_readBytes(ADS1115_I2C_ADDRESS[chNum], rbuff, 2) == 0)
"55
[e $ ! == -> ( _i2c_readBytes (3 , , *U + &U _ADS1115_I2C_ADDRESS * -> _chNum `ux -> -> # *U &U _ADS1115_I2C_ADDRESS `ui `ux &U _rbuff -> -> 2 `i `uc `i -> 0 `i 9  ]
[; ;ads1114.c: 56: return 0;
"56
[e ) -> -> 0 `i `uc ]
[e $UE 7  ]
[e :U 9 ]
[; ;ads1114.c: 58: *raw_adc = ((int16_t)rbuff[0] << 8) | rbuff[1];
"58
[e = *U _raw_adc | << -> *U + &U _rbuff * -> -> -> 0 `i `ui `ux -> -> # *U &U _rbuff `ui `ux `i -> 8 `i -> *U + &U _rbuff * -> -> -> 1 `i `ui `ux -> -> # *U &U _rbuff `ui `ux `i ]
[; ;ads1114.c: 59: return 1;
"59
[e ) -> -> 1 `i `uc ]
[e $UE 7  ]
[; ;ads1114.c: 60: }
"60
[e :UE 7 ]
}
"62
[v _ads1114_Comparator_SetUp `(uc ~T0 @X0 1 ef4`uc`uc`uc`uc ]
"64
{
[; ;ads1114.c: 62: bool ads1114_Comparator_SetUp(uint8_t mode, uint8_t polar,
[; ;ads1114.c: 63: uint8_t latch, uint8_t que)
[; ;ads1114.c: 64: {
[e :U _ads1114_Comparator_SetUp ]
"62
[v _mode `uc ~T0 @X0 1 r1 ]
[v _polar `uc ~T0 @X0 1 r2 ]
"63
[v _latch `uc ~T0 @X0 1 r3 ]
[v _que `uc ~T0 @X0 1 r4 ]
"64
[f ]
"65
[v _wbuff `uc ~T0 @X0 1 a ]
[; ;ads1114.c: 65: uint8_t wbuff = 0x01;
[e = _wbuff -> -> 1 `i `uc ]
"66
[v _rbuff `uc ~T0 @X0 -> 2 `i a ]
[; ;ads1114.c: 66: uint8_t rbuff[2];
[; ;ads1114.c: 68: if(!i2c_writeBytes(0x92, &wbuff, 1, 1))
"68
[e $ ! ! != -> ( _i2c_writeBytes (4 , , , -> -> 146 `i `uc -> &U _wbuff `*Cuc -> -> 1 `i `uc -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 11  ]
[; ;ads1114.c: 69: return 0;
"69
[e ) -> -> 0 `i `uc ]
[e $UE 10  ]
[e :U 11 ]
[; ;ads1114.c: 71: if(!i2c_readBytes(0x92, rbuff, 2))
"71
[e $ ! ! != -> ( _i2c_readBytes (3 , , -> -> 146 `i `uc &U _rbuff -> -> 2 `i `uc `i -> -> -> 0 `i `uc `i 12  ]
[; ;ads1114.c: 72: return 0;
"72
[e ) -> -> 0 `i `uc ]
[e $UE 10  ]
[e :U 12 ]
[; ;ads1114.c: 75: rbuff[1] |= (mode << 4) | (polar << 3) | (latch << 2) | que;
"75
[e =| *U + &U _rbuff * -> -> -> 1 `i `ui `ux -> -> # *U &U _rbuff `ui `ux -> | | | << -> _mode `i -> 4 `i << -> _polar `i -> 3 `i << -> _latch `i -> 2 `i -> _que `i `uc ]
[; ;ads1114.c: 77: return i2c_writeBytes_to(0x92, &wbuff, 1, rbuff, 2);
"77
[e ) ( _i2c_writeBytes_to (4 , , , , -> -> 146 `i `uc -> &U _wbuff `*Cuc -> -> 1 `i `uc -> &U _rbuff `*Cuc -> -> 2 `i `uc ]
[e $UE 10  ]
[; ;ads1114.c: 78: }
"78
[e :UE 10 ]
}
