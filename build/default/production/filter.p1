Version 3.2 HI-TECH Software Intermediate Code
"17 filter.h
[s S2 `f 1 `f 1 `f 1 `f 1 `f 1 `f 1 ]
[n S2 . _err_measure _err_estimate _q_process _current_estimate _last_estimate _kalman_gain ]
"14 filter.c
[c E127 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 .. ]
[n E127 . LEVEL_1 LEVEL_2 LEVEL_3 LEVEL_4 LEVEL_5 LEVEL_6 LEVEL_7 LEVEL_8 LEVEL_9 LEVEL_10 LEVEL_11 LEVEL_12 LEVEL_13 LEVEL_14 LEVEL_15  ]
"30 C:\Program Files\Microchip\xc8\v2.32\pic\include\c90\math.h
[v _fabs `(d ~T0 @X0 0 ef1`d ]
[; ;stdbool.h: 15: typedef unsigned char bool;
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef __int24 int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 52: typedef unsigned char uint8_t;
[; ;stdint.h: 58: typedef unsigned int uint16_t;
[; ;stdint.h: 65: typedef __uint24 uint24_t;
[; ;stdint.h: 72: typedef unsigned long int uint32_t;
[; ;stdint.h: 88: typedef signed char int_least8_t;
[; ;stdint.h: 96: typedef signed int int_least16_t;
[; ;stdint.h: 109: typedef __int24 int_least24_t;
[; ;stdint.h: 118: typedef signed long int int_least32_t;
[; ;stdint.h: 136: typedef unsigned char uint_least8_t;
[; ;stdint.h: 143: typedef unsigned int uint_least16_t;
[; ;stdint.h: 154: typedef __uint24 uint_least24_t;
[; ;stdint.h: 162: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 181: typedef signed char int_fast8_t;
[; ;stdint.h: 188: typedef signed int int_fast16_t;
[; ;stdint.h: 200: typedef __int24 int_fast24_t;
[; ;stdint.h: 208: typedef signed long int int_fast32_t;
[; ;stdint.h: 224: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 230: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 240: typedef __uint24 uint_fast24_t;
[; ;stdint.h: 247: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 268: typedef int32_t intmax_t;
[; ;stdint.h: 282: typedef uint32_t uintmax_t;
[; ;stdint.h: 289: typedef int16_t intptr_t;
[; ;stdint.h: 294: typedef uint16_t uintptr_t;
[; ;math.h: 30: extern double fabs(double);
[; ;math.h: 31: extern double floor(double);
[; ;math.h: 32: extern double ceil(double);
[; ;math.h: 33: extern double modf(double, double *);
[; ;math.h: 34: extern double sqrt(double);
[; ;math.h: 35: extern double atof(const char *);
[; ;math.h: 36: extern double sin(double) ;
[; ;math.h: 37: extern double cos(double) ;
[; ;math.h: 38: extern double tan(double) ;
[; ;math.h: 39: extern double asin(double) ;
[; ;math.h: 40: extern double acos(double) ;
[; ;math.h: 41: extern double atan(double);
[; ;math.h: 42: extern double atan2(double, double) ;
[; ;math.h: 43: extern double log(double);
[; ;math.h: 44: extern double log10(double);
[; ;math.h: 45: extern double pow(double, double) ;
[; ;math.h: 46: extern double exp(double) ;
[; ;math.h: 47: extern double sinh(double) ;
[; ;math.h: 48: extern double cosh(double) ;
[; ;math.h: 49: extern double tanh(double);
[; ;math.h: 50: extern double eval_poly(double, const double *, int);
[; ;math.h: 51: extern double frexp(double, int *);
[; ;math.h: 52: extern double ldexp(double, int);
[; ;math.h: 53: extern double fmod(double, double);
[; ;math.h: 54: extern double trunc(double);
[; ;math.h: 55: extern double round(double);
[; ;board.h: 46: typedef union {
[; ;board.h: 47: int16_t i16_data;
[; ;board.h: 48: uint16_t u16_data;
[; ;board.h: 49: __pack uint8_t u8_Data[2];
[; ;board.h: 50: } u_2byte_Conv;
[; ;board.h: 52: enum {
[; ;board.h: 53: CELSIUS,
[; ;board.h: 54: FAHRENHEIT
[; ;board.h: 55: };
[; ;board.h: 57: enum {
[; ;board.h: 58: RAW_MODE,
[; ;board.h: 59: FIL_MODE
[; ;board.h: 60: };
[; ;board.h: 62: enum {
[; ;board.h: 63: GAS_CH0,
[; ;board.h: 64: GAS_CH1,
[; ;board.h: 65: GAS_CH2,
[; ;board.h: 66: GAS_CH3
[; ;board.h: 67: };
[; ;board.h: 69: enum {
[; ;board.h: 70: USB_NONE,
[; ;board.h: 71: USB_DETACHED,
[; ;board.h: 72: USB_ATTACHED
[; ;board.h: 73: };
[; ;board.h: 75: enum {
[; ;board.h: 76: TEMP_CMP_OFF,
[; ;board.h: 77: TEMP_CMP_ON
[; ;board.h: 78: };
[; ;board.h: 80: enum {
[; ;board.h: 81: OFF,
[; ;board.h: 82: ON
[; ;board.h: 83: };
[; ;board.h: 143: void write_command(const uint8_t* buff);
[; ;board.h: 144: uint16_t* get_product_desc();
[; ;filter.h: 16: typedef struct
[; ;filter.h: 17: {
[; ;filter.h: 18: float _err_measure;
[; ;filter.h: 19: float _err_estimate;
[; ;filter.h: 21: float _q_process;
[; ;filter.h: 23: float _current_estimate;
[; ;filter.h: 24: float _last_estimate;
[; ;filter.h: 25: float _kalman_gain;
[; ;filter.h: 26: } s_KalmanFilter_t;
[; ;filter.h: 29: typedef enum {
[; ;filter.h: 30: LEVEL_1 = 1,
[; ;filter.h: 31: LEVEL_2,
[; ;filter.h: 32: LEVEL_3,
[; ;filter.h: 33: LEVEL_4,
[; ;filter.h: 34: LEVEL_5,
[; ;filter.h: 35: LEVEL_6,
[; ;filter.h: 36: LEVEL_7,
[; ;filter.h: 37: LEVEL_8,
[; ;filter.h: 38: LEVEL_9,
[; ;filter.h: 39: LEVEL_10,
[; ;filter.h: 40: LEVEL_11,
[; ;filter.h: 41: LEVEL_12,
[; ;filter.h: 42: LEVEL_13,
[; ;filter.h: 43: LEVEL_14,
[; ;filter.h: 44: LEVEL_15
[; ;filter.h: 45: } e_KalmaFilter_sensitivity;
[; ;filter.h: 56: float Kalman_updateEstimate(s_KalmanFilter_t *pObj,float mea);
[; ;filter.h: 57: void Kalman_setMeasurementError(s_KalmanFilter_t *pObj,float mea_e);
[; ;filter.h: 58: void Kalman_setEstimateError(s_KalmanFilter_t *pObj,float est_e);
[; ;filter.h: 59: void Kalman_setProcessNoise(s_KalmanFilter_t *pObj,float q);
[; ;filter.h: 61: float Kalman_getKalmanGain(s_KalmanFilter_t *pObj);
[; ;filter.h: 62: float Kalman_getEstimateError(s_KalmanFilter_t *pObj);
[; ;filter.h: 64: void Set_KalmanFilter_Sensitivity(s_KalmanFilter_t *pObj, e_KalmaFilter_sensitivity e_level);
"13 filter.c
[v _kalmanFilter `S2 ~T0 @X0 -> 4 `i e ]
[; ;filter.c: 13: s_KalmanFilter_t kalmanFilter[4];
"14
[v _e_level `E127 ~T0 @X0 1 e ]
[; ;filter.c: 14: e_KalmaFilter_sensitivity e_level;
"17
[v _Kalman_updateEstimate `(f ~T0 @X0 1 ef2`*S2`f ]
"18
{
[; ;filter.c: 17: float Kalman_updateEstimate(s_KalmanFilter_t *pObj,float mea)
[; ;filter.c: 18: {
[e :U _Kalman_updateEstimate ]
"17
[v _pObj `*S2 ~T0 @X0 1 r1 ]
[v _mea `f ~T0 @X0 1 r2 ]
"18
[f ]
[; ;filter.c: 19: pObj->_kalman_gain = pObj->_err_estimate/(pObj->_err_estimate + pObj->_err_measure);
"19
[e = . *U _pObj 5 / . *U _pObj 1 + . *U _pObj 1 . *U _pObj 0 ]
[; ;filter.c: 21: pObj->_current_estimate = pObj->_last_estimate + pObj->_kalman_gain * (mea - pObj->_last_estimate);
"21
[e = . *U _pObj 3 + . *U _pObj 4 * . *U _pObj 5 - _mea . *U _pObj 4 ]
[; ;filter.c: 23: pObj->_err_estimate = (1.0 - pObj->_kalman_gain)*pObj->_err_estimate +
[; ;filter.c: 24: fabs(pObj->_last_estimate-pObj->_current_estimate)*pObj->_q_process;
"24
[e = . *U _pObj 1 -> + * - .1.0 -> . *U _pObj 5 `d -> . *U _pObj 1 `d * ( _fabs (1 -> - . *U _pObj 4 . *U _pObj 3 `d -> . *U _pObj 2 `d `f ]
[; ;filter.c: 26: pObj->_last_estimate=pObj->_current_estimate;
"26
[e = . *U _pObj 4 . *U _pObj 3 ]
[; ;filter.c: 28: return pObj->_current_estimate;
"28
[e ) . *U _pObj 3 ]
[e $UE 3  ]
[; ;filter.c: 29: }
"29
[e :UE 3 ]
}
"31
[v _Kalman_setMeasurementError `(v ~T0 @X0 1 ef2`*S2`f ]
"32
{
[; ;filter.c: 31: void Kalman_setMeasurementError(s_KalmanFilter_t *pObj,float mea_e)
[; ;filter.c: 32: {
[e :U _Kalman_setMeasurementError ]
"31
[v _pObj `*S2 ~T0 @X0 1 r1 ]
[v _mea_e `f ~T0 @X0 1 r2 ]
"32
[f ]
[; ;filter.c: 33: pObj->_err_measure = mea_e;
"33
[e = . *U _pObj 0 _mea_e ]
[; ;filter.c: 34: }
"34
[e :UE 4 ]
}
"35
[v _Kalman_setEstimateError `(v ~T0 @X0 1 ef2`*S2`f ]
"36
{
[; ;filter.c: 35: void Kalman_setEstimateError(s_KalmanFilter_t *pObj,float est_e)
[; ;filter.c: 36: {
[e :U _Kalman_setEstimateError ]
"35
[v _pObj `*S2 ~T0 @X0 1 r1 ]
[v _est_e `f ~T0 @X0 1 r2 ]
"36
[f ]
[; ;filter.c: 37: pObj->_err_estimate=est_e;
"37
[e = . *U _pObj 1 _est_e ]
[; ;filter.c: 38: }
"38
[e :UE 5 ]
}
"40
[v _Kalman_setProcessNoise `(v ~T0 @X0 1 ef2`*S2`f ]
"41
{
[; ;filter.c: 40: void Kalman_setProcessNoise(s_KalmanFilter_t *pObj,float q)
[; ;filter.c: 41: {
[e :U _Kalman_setProcessNoise ]
"40
[v _pObj `*S2 ~T0 @X0 1 r1 ]
[v _q `f ~T0 @X0 1 r2 ]
"41
[f ]
[; ;filter.c: 42: pObj->_q_process=q;
"42
[e = . *U _pObj 2 _q ]
[; ;filter.c: 43: }
"43
[e :UE 6 ]
}
"45
[v _Kalman_getKalmanGain `(f ~T0 @X0 1 ef1`*S2 ]
"46
{
[; ;filter.c: 45: float Kalman_getKalmanGain(s_KalmanFilter_t *pObj)
[; ;filter.c: 46: {
[e :U _Kalman_getKalmanGain ]
"45
[v _pObj `*S2 ~T0 @X0 1 r1 ]
"46
[f ]
[; ;filter.c: 47: return pObj->_kalman_gain;
"47
[e ) . *U _pObj 5 ]
[e $UE 7  ]
[; ;filter.c: 49: }
"49
[e :UE 7 ]
}
"50
[v _Kalman_getEstimateError `(f ~T0 @X0 1 ef1`*S2 ]
"51
{
[; ;filter.c: 50: float Kalman_getEstimateError(s_KalmanFilter_t *pObj)
[; ;filter.c: 51: {
[e :U _Kalman_getEstimateError ]
"50
[v _pObj `*S2 ~T0 @X0 1 r1 ]
"51
[f ]
[; ;filter.c: 52: return pObj->_err_estimate;
"52
[e ) . *U _pObj 1 ]
[e $UE 8  ]
[; ;filter.c: 53: }
"53
[e :UE 8 ]
}
"55
[v _Set_KalmanFilter_Sensitivity `(v ~T0 @X0 1 ef2`*S2`E127 ]
"56
{
[; ;filter.c: 55: void Set_KalmanFilter_Sensitivity(s_KalmanFilter_t *pObj, e_KalmaFilter_sensitivity e_level)
[; ;filter.c: 56: {
[e :U _Set_KalmanFilter_Sensitivity ]
"55
[v _pObj `*S2 ~T0 @X0 1 r1 ]
[v _e_level `E127 ~T0 @X0 1 r2 ]
"56
[f ]
"57
[v _sensitivity `f ~T0 @X0 1 a ]
[; ;filter.c: 57: float sensitivity;
[; ;filter.c: 58: switch (e_level)
"58
[e $U 11  ]
[; ;filter.c: 59: {
"59
{
[; ;filter.c: 60: case LEVEL_1 : sensitivity = 1.0; break;
"60
[e :U 12 ]
[e = _sensitivity -> .1.0 `f ]
[e $U 10  ]
[; ;filter.c: 61: case LEVEL_2 : sensitivity = 0.9; break;
"61
[e :U 13 ]
[e = _sensitivity -> .0.9 `f ]
[e $U 10  ]
[; ;filter.c: 62: case LEVEL_3 : sensitivity = 0.8; break;
"62
[e :U 14 ]
[e = _sensitivity -> .0.8 `f ]
[e $U 10  ]
[; ;filter.c: 63: case LEVEL_4 : sensitivity = 0.7; break;
"63
[e :U 15 ]
[e = _sensitivity -> .0.7 `f ]
[e $U 10  ]
[; ;filter.c: 64: case LEVEL_5 : sensitivity = 0.6; break;
"64
[e :U 16 ]
[e = _sensitivity -> .0.6 `f ]
[e $U 10  ]
[; ;filter.c: 65: case LEVEL_6 : sensitivity = 0.5; break;
"65
[e :U 17 ]
[e = _sensitivity -> .0.5 `f ]
[e $U 10  ]
[; ;filter.c: 66: case LEVEL_7 : sensitivity = 0.4; break;
"66
[e :U 18 ]
[e = _sensitivity -> .0.4 `f ]
[e $U 10  ]
[; ;filter.c: 67: case LEVEL_8 : sensitivity = 0.35; break;
"67
[e :U 19 ]
[e = _sensitivity -> .0.35 `f ]
[e $U 10  ]
[; ;filter.c: 68: case LEVEL_9 : sensitivity = 0.3; break;
"68
[e :U 20 ]
[e = _sensitivity -> .0.3 `f ]
[e $U 10  ]
[; ;filter.c: 69: case LEVEL_10 : sensitivity = 0.25; break;
"69
[e :U 21 ]
[e = _sensitivity -> .0.25 `f ]
[e $U 10  ]
[; ;filter.c: 70: case LEVEL_11 : sensitivity = 0.2; break;
"70
[e :U 22 ]
[e = _sensitivity -> .0.2 `f ]
[e $U 10  ]
[; ;filter.c: 71: case LEVEL_12 : sensitivity = 0.1; break;
"71
[e :U 23 ]
[e = _sensitivity -> .0.1 `f ]
[e $U 10  ]
[; ;filter.c: 72: case LEVEL_13 : sensitivity = 0.01; break;
"72
[e :U 24 ]
[e = _sensitivity -> .0.01 `f ]
[e $U 10  ]
[; ;filter.c: 73: case LEVEL_14 : sensitivity = 0.001; break;
"73
[e :U 25 ]
[e = _sensitivity -> .0.001 `f ]
[e $U 10  ]
[; ;filter.c: 74: case LEVEL_15 : sensitivity = 0.0001;break;
"74
[e :U 26 ]
[e = _sensitivity -> .0.0001 `f ]
[e $U 10  ]
[; ;filter.c: 75: default: sensitivity = 0.1; break;
"75
[e :U 27 ]
[e = _sensitivity -> .0.1 `f ]
[e $U 10  ]
"76
}
[; ;filter.c: 76: }
[e $U 10  ]
"58
[e :U 11 ]
[e [\ _e_level , $ . `E127 0 12
 , $ . `E127 1 13
 , $ . `E127 2 14
 , $ . `E127 3 15
 , $ . `E127 4 16
 , $ . `E127 5 17
 , $ . `E127 6 18
 , $ . `E127 7 19
 , $ . `E127 8 20
 , $ . `E127 9 21
 , $ . `E127 10 22
 , $ . `E127 11 23
 , $ . `E127 12 24
 , $ . `E127 13 25
 , $ . `E127 14 26
 27 ]
"76
[e :U 10 ]
[; ;filter.c: 77: Kalman_setProcessNoise(pObj, sensitivity);
"77
[e ( _Kalman_setProcessNoise (2 , _pObj _sensitivity ]
[; ;filter.c: 78: }
"78
[e :UE 9 ]
}
